#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <windows.h>
#include "SP1.h"
#define TAILLE 9
#define FICHIER_SAUVEGARDE "partie_sauvegardee.txt"

// Initialisation du plateau
void initialiser_plateau(char plateau[TAILLE][TAILLE], int joueurs, int positions[4][2]) {
    for (int i = 0; i < TAILLE; i++) {
        for (int j = 0; j < TAILLE; j++) {
            plateau[i][j] = '.'; // Case vide
        }
    }

    if (joueurs == 2) {
        positions[0][0] = TAILLE - 1; positions[0][1] = TAILLE / 2; // Joueur 1
        positions[1][0] = 0; positions[1][1] = TAILLE / 2;         // Joueur 2
        plateau[positions[0][0]][positions[0][1]] = '@';
        plateau[positions[1][0]][positions[1][1]] = '&';
    } else if (joueurs == 4) {
        positions[0][0] = TAILLE - 1; positions[0][1] = TAILLE / 2; // Joueur 1
        positions[1][0] = 0; positions[1][1] = TAILLE / 2;         // Joueur 2
        positions[2][0] = TAILLE / 2; positions[2][1] = 0;         // Joueur 3
        positions[3][0] = TAILLE / 2; positions[3][1] = TAILLE - 1;// Joueur 4
        plateau[positions[0][0]][positions[0][1]] = '@';
        plateau[positions[1][0]][positions[1][1]] = '&';
        plateau[positions[2][0]][positions[2][1]] = '#';
        plateau[positions[3][0]][positions[3][1]] = '*';
    }
}

// Affichage esthétique du plateau
void afficher_plateau(char plateau[TAILLE][TAILLE]) {
    system("cls");
    printf("    ");
    for (int i = 0; i < TAILLE; i++) {
        printf(" %c ", 'A' + i); // En-tête des colonnes
    }
    printf("\n   ");
    for (int i = 0; i < TAILLE; i++) {
        printf("___");
    }
    printf("\n");
    for (int i = 0; i < TAILLE; i++) {
        printf("%2d |", i + 1); // En-tête des lignes
        for (int j = 0; j < TAILLE; j++) {
            printf(" %c|", plateau[i][j]); // Cases et séparateurs

        }
        printf("\n   ");
        for (int j = 0; j < TAILLE; j++) {
            printf("---");
        }
        printf("\n");
    }
}

// Déplacement des personnages
int deplacer_personnage(char plateau[TAILLE][TAILLE], int *x, int *y, char direction, char personnage, char adversaire) {
    int new_x = *x, new_y = *y;

    if (direction == 'z') new_x--;      // Haut
    else if (direction == 'q') new_y--; // Gauche
    else if (direction == 's') new_x++; // Bas
    else if (direction == 'd') new_y++; // Droite

    // Vérifier le saut par-dessus un adversaire
    if (new_x >= 0 && new_x < TAILLE && new_y >= 0 && new_y < TAILLE &&
        plateau[new_x][new_y] == adversaire) {
        int jump_x = new_x + (new_x - *x);
        int jump_y = new_y + (new_y - *y);

        if (jump_x >= 0 && jump_x < TAILLE && jump_y >= 0 && jump_y < TAILLE &&
            plateau[jump_x][jump_y] == '.') {
            plateau[*x][*y] = '.';
            *x = jump_x;
            *y = jump_y;
            plateau[*x][*y] = personnage;
            return 1;
        }
    }

    // Déplacement normal
    if (new_x >= 0 && new_x < TAILLE && new_y >= 0 && new_y < TAILLE &&
        plateau[new_x][new_y] == '.') {
        plateau[*x][*y] = '.';
        *x = new_x;
        *y = new_y;
        plateau[*x][*y] = personnage;
        return 1;
    }

    return 0; // Mouvement impossible
}

// Placement des barrières
int placer_barriere(char plateau[TAILLE][TAILLE], char colonne, int ligne, char orientation) {
    int x = ligne - 1; // Ligne de la barrière
    int y = colonne - 'A'; // Colonne de la barrière

    // Vérifier si les coordonnées sont valides
    if (x < 0 || x >= TAILLE || y < 0 || y >= TAILLE) {
        printf("Coordonnees invalides.\n");
        return 0;
    }

    // Placement d'une barrière horizontale
    if (orientation == 'h') {
        if (x < 0 || x >= TAILLE || y < 0 || y >= TAILLE || plateau[x][y] != '.') {
            printf("Impossible de placer une barriere horizontale ici.\n");
            return 0;
        }
        plateau[x][y] = '-'; // Placer une barrière horizontale sur une seule case
    }
    // Placement d'une barrière verticale
    else if (orientation == 'v') {
        if (x < 0 || x >= TAILLE || y < 0 || y >= TAILLE || plateau[x][y] != '.') {
            printf("Impossible de placer une barriere verticale ici.\n");
            return 0;
        }
        plateau[x][y] = '|'; // Placer une barrière verticale sur une seule case
    }
    else {
        printf("Orientation invalide. Utilisez 'h' (horizontale) ou 'v' (verticale).\n");
        return 0;
    }

    return 1; // Barrière placée avec succès
}
// Sauvegarde de la partie
void sauvegarder_partie(char plateau[TAILLE][TAILLE], int x1, int y1, int x2, int y2) {
    FILE *f = fopen(FICHIER_SAUVEGARDE, "w");
    if (!f) {
        printf("Erreur lors de la sauvegarde.\n");
        return;
    }

    for (int i = 0; i < TAILLE; i++) {
        for (int j = 0; j < TAILLE; j++) {
            fputc(plateau[i][j], f);
        }
        fputc('\n', f);
    }
    fprintf(f, "%d %d %d %d\n", x1, y1, x2, y2);
    fclose(f);
    printf("Partie sauvegardee avec succes.\n");
}

// Chargement de la partie
int charger_partie(char plateau[TAILLE][TAILLE], int *x1, int *y1, int *x2, int *y2) {
    FILE *f = fopen(FICHIER_SAUVEGARDE, "r");
    if (!f) {
        printf("Aucune sauvegarde trouvee.\n");
        return 0;
    }

    for (int i = 0; i < TAILLE; i++) {
        for (int j = 0; j < TAILLE; j++) {
            plateau[i][j] = fgetc(f);
        }
        fgetc(f); // Lire le saut de ligne
    }

    fscanf(f, "%d %d %d %d", x1, y1, x2, y2);
    fclose(f);
    return 1;
}

// Vérifier si un joueur est bloqué
int joueur_bloque(char plateau[TAILLE][TAILLE], int x, int y) {
    int directions[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    for (int i = 0; i < 4; i++) {
        int new_x = x + directions[i][0];
        int new_y = y + directions[i][1];
        if (new_x >= 0 && new_x < TAILLE && new_y >= 0 && new_y < TAILLE &&
            plateau[new_x][new_y] == '.') {
            return 0; // Le joueur peut se déplacer
        }
    }
    return 1; // Toutes les directions sont bloquées
}

// Fonction principale pour jouer une partie
void SP1(int joueurs) {
    char plateau[TAILLE][TAILLE];
    int positions[4][2];
    char noms_joueurs[4][20]; // Pour stocker les noms des joueurs (20 caractères max)

    // Demander les noms des joueurs
    for (int i = 0; i < joueurs; i++) {
        printf("Entrez le nom du joueur %d : ", i + 1);
        scanf("%s", noms_joueurs[i]);
    }

    initialiser_plateau(plateau, joueurs, positions);

    char input;
    int tour = 0;

    while (1) {
        afficher_plateau(plateau);
        printf("%s (Joueur %d), c'est votre tour. Deplacez-vous (z/q/s/d), placez une barriere (b), passez (i), ou sauvegardez (m).\n", noms_joueurs[tour], tour + 1);

        // Vérifier si le joueur est bloqué
        if (joueur_bloque(plateau, positions[tour][0], positions[tour][1])) {
            afficher_plateau(plateau);
            printf("\033[1;33m");
            printf("%s (Joueur %d) est bloqué. Match nul !\n", noms_joueurs[tour], tour + 1);
            printf("\033[0m"); // Réinitialiser la couleur

            Sleep(3000); // Pause de 3 secondes
            return;      // Fin du jeu
        }

        input = _getch();

        if (input == 'm') {
            sauvegarder_partie(plateau, positions[0][0], positions[0][1], positions[1][0], positions[1][1]);
        } else if (input == 'b') {
            printf("Entrez les coordonnées (ex: D3) et l'orientation (h/v) : ");
            char colonne;
            int ligne;
            char orientation;
            scanf(" %c%d %c", &colonne, &ligne, &orientation);
            placer_barriere(plateau, colonne, ligne, orientation);
        } else if (input == 'i') {
            printf("%s (Joueur %d) a passé son tour.\n", noms_joueurs[tour], tour + 1);
            Sleep(1000); // Pause pour afficher le message
            tour = (tour + 1) % joueurs; // Passer au joueur suivant
            continue;
        }else if (input == 'n') {
            exit(0);
        }
        else {
            char symbole = (tour == 0) ? '@' : (tour == 1) ? '&' : (tour == 2) ? '#' : '*';
            if (deplacer_personnage(plateau, &positions[tour][0], &positions[tour][1], input, symbole, (tour % 2 == 0) ? '&' : '@')) {
                if ((tour == 0 && positions[tour][0] == 0) ||
                    (tour == 1 && positions[tour][0] == TAILLE - 1) ||
                    (tour == 2 && positions[tour][1] == TAILLE - 1) ||
                    (tour == 3 && positions[tour][1] == 0)) {
                    afficher_plateau(plateau);
                    printf("\033[1;32m"); // Couleur verte pour la victoire
                    printf("Felicitations ! %s (Joueur %d) a gagne !\n", noms_joueurs[tour], tour + 1);
                    printf("\033[0m"); // Réinitialiser la couleur
                    Sleep(3000); // Pause de 3 secondes
                    return;      // Fin du jeu
                }
                tour = (tour + 1) % joueurs;
            }
        }
    }
}
